import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump Frida 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Device"
        prototype: "QObject"
        exports: ["Device 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Local": 0,
                "Remote": 1,
                "Usb": 2
            }
        }
        Property { name: "id"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Signal {
            name: "idChanged"
            Parameter { name: "newId"; type: "string" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "newName"; type: "string" }
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "newType"; type: "Type" }
        }
        Method {
            name: "inject"
            Parameter { name: "script"; type: "Script"; isPointer: true }
            Parameter { name: "pid"; type: "uint" }
        }
    }
    Component {
        name: "DeviceListModel"
        prototype: "QAbstractListModel"
        exports: ["DeviceListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "countChanged"
            Parameter { name: "newCount"; type: "int" }
        }
        Method { name: "count"; type: "int" }
        Method {
            name: "get"
            type: "Device*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "Frida"
        prototype: "QObject"
        exports: ["Frida 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "localSystem"; type: "Device"; isReadonly: true; isPointer: true }
        Signal {
            name: "localSystemChanged"
            Parameter { name: "newLocalSystem"; type: "Device"; isPointer: true }
        }
        Signal {
            name: "deviceAdded"
            Parameter { name: "device"; type: "Device"; isPointer: true }
        }
        Signal {
            name: "deviceRemoved"
            Parameter { name: "device"; type: "Device"; isPointer: true }
        }
    }
    Component {
        name: "Process"
        prototype: "QObject"
        exports: ["Process 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "pid"; type: "uint"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "smallIcon"; type: "QUrl"; isReadonly: true }
        Property { name: "largeIcon"; type: "QUrl"; isReadonly: true }
    }
    Component {
        name: "ProcessListModel"
        prototype: "QAbstractListModel"
        exports: ["ProcessListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "device"; type: "Device"; isPointer: true }
        Property { name: "isLoading"; type: "bool"; isReadonly: true }
        Signal {
            name: "deviceChanged"
            Parameter { name: "newDevice"; type: "Device"; isPointer: true }
        }
        Signal {
            name: "isLoadingChanged"
            Parameter { name: "newIsLoading"; type: "bool" }
        }
        Signal {
            name: "error"
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "count"; type: "int" }
        Method {
            name: "get"
            type: "Process*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "refresh" }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "Script"
        prototype: "QObject"
        exports: ["Script 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Loading": 0,
                "Loaded": 1,
                "Error": 2
            }
        }
        Enum {
            name: "Runtime"
            values: {
                "Default": 0,
                "Duk": 1,
                "V8": 2
            }
        }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "url"; type: "QUrl" }
        Property { name: "name"; type: "string" }
        Property { name: "runtime"; type: "Runtime" }
        Property { name: "source"; type: "string" }
        Property { name: "instances"; type: "QList<QObject*>"; isReadonly: true }
        Signal {
            name: "statusChanged"
            Parameter { name: "newStatus"; type: "Status" }
        }
        Signal {
            name: "urlChanged"
            Parameter { name: "newUrl"; type: "QUrl" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "newName"; type: "string" }
        }
        Signal {
            name: "runtimeChanged"
            Parameter { name: "newRuntime"; type: "Runtime" }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "newSource"; type: "string" }
        }
        Signal {
            name: "instancesChanged"
            Parameter { name: "newInstances"; type: "QList<QObject*>" }
        }
        Signal {
            name: "error"
            Parameter { name: "sender"; type: "ScriptInstance"; isPointer: true }
            Parameter { name: "message"; type: "string" }
        }
        Signal {
            name: "message"
            Parameter { name: "sender"; type: "ScriptInstance"; isPointer: true }
            Parameter { name: "object"; type: "QJsonObject" }
            Parameter { name: "data"; type: "QVariant" }
        }
        Method { name: "stop" }
        Method {
            name: "post"
            Parameter { name: "object"; type: "QJsonObject" }
        }
        Method { name: "enableDebugger" }
        Method {
            name: "enableDebugger"
            Parameter { name: "basePort"; type: "ushort" }
        }
        Method { name: "disableDebugger" }
        Method { name: "enableJit" }
    }
}
